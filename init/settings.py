"""
Django settings for project.

Generated by 'django-admin startproject' using Django 1.11.7.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import json
import logging
import logging.config
import logging.handlers
import os
import sys

from common.tool.common_func import *
from common.tool.config import Config
from common.tool.my_redis_cache import MyRedisCache
from init.config import *
from init.const import *

SERVER_START_TIME = get_current_time()
CURRENT_DATE = get_current_date()
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
#######################################################################################
db_key = 'DB'
DB_HOST = conf_dict[db_key]['host']
DB_PORT = int(conf_dict[db_key]['port'])
DB_USERNAME = conf_dict[db_key]['username']
DB_PASSWORD = conf_dict[db_key]['password']
DB_NAME = conf_dict[db_key]['dbname']
print("DB_HOST[%s] DB_PORT[%s] DB_USERNAME[%s] DB_PASSWORD[%s] DB_NAME[%s]" % (
    DB_HOST, DB_PORT, DB_USERNAME, DB_PASSWORD, DB_NAME))

dirfile_key = 'DIRFILE'
dirfile_log = conf_dict[dirfile_key]['logroot']
applogsdir = os.getenv("MATRIX_APPLOGS_DIR", "/tmp/applogs")
if applogsdir and os.path.isdir(applogsdir):
    log_root = applogsdir.rstrip("/")
else:
    log_root = dirfile_log.rstrip("/")
    if not os.path.exists(log_root):
        os.mkdir(log_root)

print("log_root:%s" % log_root)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ovjmbwl$ses4)++0+@mp79^8v27n+5&p*8pq32cr*0*or6migi'

DJANGO_INFO_LOG= "django_info.log"
DJANGO_ERROR_LOG= "django_error.log"

if isRelease:
    DEBUG = False
else:
    DEBUG = True

ALLOWED_HOSTS = eval(conf_dict['COMMON']['allowed_host'])
# Application definition
INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 以下为自定义中间件
    'common.middleware.traffice.TrafficMiddleware',
    'common.middleware.exception.ExceptionMiddleware',
]

log_formaters = {
        'verbose': {
            'format': '%(asctime)s %(levelname)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'datestart': {
            'format': '%(asctime)s %(message)s'
        },
        'simple': {
            'format': '%(message)s'
        },
        'datestart_with_USERLOGGER': {
            'format': '%(asctime)s USERLOGGER %(levelname)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'datestart_with_TRACELOGGER': {
            'format': '%(message)s'
        },
        'datestart_with_ELAPSEDLOGGER': {
            'format': '%(asctime)s ELAPSEDLOGGER %(message)s'
        },
        'datestart_with_KAFKAASYNCLOGGER': {
            'format': '%(asctime)s KAFKAASYNCLOGGER %(message)s'
        },
    }
if is_linux():
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': log_formaters,
        'filters': {
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
            },
        },
        'handlers': {
            # 默认日志
            'default': {
                'level': 'DEBUG',
                'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
                'filename': os.path.join(log_root, DJANGO_INFO_LOG),  # 日志文件
                'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
                'backupCount': 3,  # 最多备份几个
                'formatter': 'datestart_with_USERLOGGER',
                'encoding': 'utf-8',
            },
            'trace': {
                'level': 'DEBUG',
                'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
                'filename': os.path.join(log_root, "trace_info.log"),  # 日志文件
                'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
                'backupCount': 3,  # 最多备份几个
                'formatter': 'datestart_with_TRACELOGGER',
                'encoding': 'utf-8',
            },
            # 错误日志
            'error': {
                'level': 'ERROR',
                'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
                'filename': os.path.join(log_root, DJANGO_ERROR_LOG),  # 日志文件
                'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
                'backupCount': 3,  # 最多备份几个
                'formatter': 'verbose',
                'encoding': 'utf-8',
            },
            # 流量日志
            'traffic': {
                'level': 'DEBUG',
                'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
                'filename': os.path.join(log_root, DJANGO_INFO_LOG),  # 日志文件
                'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
                'backupCount': 3,  # 最多备份几个
                'formatter': 'datestart',
                'encoding': 'utf-8',
            },
            # sql日志
            'sql': {
                'level': 'DEBUG',
                'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
                'filename': os.path.join(log_root, DJANGO_INFO_LOG),  # 日志文件
                'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
                'backupCount': 3,  # 最多备份几个
                'formatter': 'datestart',
                'encoding': 'utf-8',
            },
            # 函数耗时日志
            'elapsed': {
                'level': 'DEBUG',
                'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
                'filename': os.path.join(log_root, DJANGO_INFO_LOG),  # 日志文件
                'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
                'backupCount': 3,  # 最多备份几个
                'formatter': 'datestart_with_ELAPSEDLOGGER',
                'encoding': 'utf-8',
            },
            # 函数耗时日志
            'kafkaasync': {
                'level': 'DEBUG',
                'class': 'common.logging_handler.redis_kafkaasync_handler.RedisLoggingKafkaasyncHandler',  # 保存到文件，自动切
                'formatter': 'datestart_with_KAFKAASYNCLOGGER',
                'encoding': 'utf-8',
            },
        },
        'loggers': {
            'userlog': {
                'handlers': ['default'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'errorlog': {
                'handlers': ['error'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'trafficlog': {
                'handlers': ['traffic'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'sqllog': {
                'handlers': ['sql'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'elapsedlog': {
                'handlers': ['elapsed'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'kafkaasynclog': {
                'handlers': ['kafkaasync'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'tracelog': {
                'handlers': ['trace'],
                'level': 'DEBUG',
                'propagate': True,
            }
        },
    }
else:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': log_formaters,
        'filters': {
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
            },
        },
        'handlers': {
            # 终端输出
            'console': {
                'level': 'DEBUG',
                'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
                'class': 'logging.StreamHandler',  #
                'formatter': 'verbose'
            },
            'console_simple': {
                'level': 'DEBUG',
                'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
                'class': 'logging.StreamHandler',  #
                'formatter': 'simple'
            },
            # 默认日志
            'default': {
                'level': 'DEBUG',
                'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
                'filename': os.path.join(log_root, DJANGO_INFO_LOG),  # 日志文件
                'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
                'backupCount': 3,  # 最多备份几个
                'formatter': 'datestart_with_USERLOGGER',
                'encoding': 'utf-8',
            },
            'trace': {
                'level': 'DEBUG',
                'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
                'filename': os.path.join(log_root, "trace_info.log"),  # 日志文件
                'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
                'backupCount': 3,  # 最多备份几个
                'formatter': 'datestart_with_TRACELOGGER',
                'encoding': 'utf-8',
            },
            # 错误日志
            'error': {
                'level': 'ERROR',
                # 'class': 'common.logging_handler.redis_error_handler.RedisLoggingErrorHandler',  # 保存到文件，自动切

                'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
                'filename': os.path.join(log_root, "django_error.log"),  # 日志文件
                'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
                'backupCount': 3,  # 最多备份几个

                'formatter': 'verbose',
                'encoding': 'utf-8',
            },
            # 流量日志
            'traffic': {
                'level': 'DEBUG',
                # 'class': 'common.logging_handler.kafka_logging_handler.KafkaLoggingTrafficHandler',  # 保存到文件，自动切
                # 'class': 'common.logging_handler.redis_traffic_handler.RedisLoggingTrafficHandler',  # 保存到文件，自动切

                'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
                'filename': os.path.join(log_root, "django_traffic.log"),  # 日志文件
                'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
                'backupCount': 3,  # 最多备份几个

                'formatter': 'datestart',
                'encoding': 'utf-8',
            },
            # sql日志
            'sql': {
                'level': 'DEBUG',
                # 'class': 'common.logging_handler.redis_sql_handler.RedisLoggingSqlHandler',  # 保存到文件，自动切

                'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
                'filename': os.path.join(log_root, "django_sql.log"),  # 日志文件
                'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
                'backupCount': 3,  # 最多备份几个

                'formatter': 'datestart',
                'encoding': 'utf-8',
            },
            # 函数耗时日志
            'elapsed': {
                'level': 'DEBUG',
                'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
                'filename': os.path.join(log_root, "django_elapsed.log"),  # 日志文件
                'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
                'backupCount': 3,  # 最多备份几个
                'formatter': 'datestart_with_ELAPSEDLOGGER',
                'encoding': 'utf-8',
            },
            # 函数耗时日志
            'kafkaasync': {
                'level': 'DEBUG',
                'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
                'filename': os.path.join(log_root, "django_kafkaasync.log"),  # 日志文件
                'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
                'backupCount': 3,  # 最多备份几个
                'formatter': 'datestart_with_KAFKAASYNCLOGGER',
                'encoding': 'utf-8',
            },
        },
        'loggers': {
            'userlog': {
                'handlers': ['console', 'default'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'errorlog': {
                'handlers': ['console', 'error'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'trafficlog': {
                'handlers': ['traffic'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'sqllog': {
                'handlers': ['sql'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'elapsedlog': {
                'handlers': ['elapsed'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'kafkaasynclog': {
                'handlers': ['console','kafkaasync'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'tracelog':{
                'handlers': ['trace', 'console'],
                'level': 'DEBUG',
                'propagate': True,
            }
        },
    }

ROOT_URLCONF = 'init.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'template')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'init.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': DB_NAME,
        'USER': DB_USERNAME,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
        'CONN_MAX_AGE': 800,  # 保持当前连接800s，线上是900s超时
        'OPTIONS': {
            'charset': 'utf8mb4',
            'pool': {
                'max_connections': 10,  # 连接池的最大连接数
                'stale_timeout': 300,   # 连接池中连接超时时间（秒）
            },
        },
    },
    'offline-readonly': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': DB_NAME,
        'USER': DB_USERNAME,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
        'CONN_MAX_AGE': 800,  # 保持当前连接800s，线上是900s超时
        'OPTIONS': {
            'charset': 'utf8mb4',
            'pool': {
                'max_connections': 10,  # 连接池的最大连接数
                'stale_timeout': 300,   # 连接池中连接超时时间（秒）
            },
        },
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


STATIC_URL = '/static/'
STATICFILES_DIRS = {}

# redis配置
redis_key = 'REDIS'
REDIS_HOST = conf_dict[redis_key]['host']
REDIS_PORT = conf_dict[redis_key]['port']
REDIS_PWD = conf_dict[redis_key]['password']
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://%s:%s" % (REDIS_HOST, REDIS_PORT),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "CONNECTION_POOL_KWARGS": {"max_connections": 100, "decode_responses": True},
            "PASSWORD": REDIS_PWD,
        }
    }
}
print(CACHES)
REDIS_TIMEOUT = 7 * 24 * 60 * 60
CUBES_REDIS_TIMEOUT = 60 * 60
NEVER_REDIS_TIMEOUT = 365 * 24 * 60 * 60
from django_redis import get_redis_connection

django_redis_default_conn = get_redis_connection("default")
from common.tool.my_redis_cache import MyRedisCache
#
redis_handle = MyRedisCache(django_redis_default_conn)

# 跨域增加忽略
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = (
    '*'
)

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'POST',
    'PUT',
    'OPTIONS',
    'PATCH',
    'HEAD',
)

CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)

trace_logger = logging.getLogger('tracelog')
user_logger = logging.getLogger('userlog')
error_logger = logging.getLogger('errorlog')
traffic_logger = logging.getLogger('trafficlog')
sql_logger = logging.getLogger('sqllog')
elapsed_logger = logging.getLogger('elapsedlog')
kafkaasync_logger = logging.getLogger('kafkaasynclog')
print("@@@@@@@@@@@@@@@@@@@@ END init.settings.py @@@@@@@@@@@@@@@@@@@@")
